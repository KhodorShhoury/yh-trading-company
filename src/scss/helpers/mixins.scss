//   Overlay Mixin
//   Accept Argument => Color
//   Example: @include overlay(black, .5);
@mixin overlay($color, $opacity) {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba($color, $opacity);
}

// auto add prefixes
@mixin prefixer($property, $value, $prefixes: webkit moz o ms) {
    @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
}

//  ** Animation Mixin For All Browser
//  ** Accept Argument => Animation Name
//  ** Example: @include keyframes(SlideUpAndDown)

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

//horizantal centering
@mixin horizantalCenterer() {
    position: absolute;
    left: 50%;
    @include prefixer(transform, translateX(-50%), webkit moz o);
}

@mixin verticalCenterer() {
    position: absolute;
    top: 50%;
    @include prefixer(transform, translateY(-50%), webkit moz o);
}

//horizantal and vertical centering
@mixin centerer() {
    position: absolute;
    top: 50%;
    left: 50%;
    @include prefixer(transform, translate(-50%, -50%), webkit moz o);
}

@mixin contentCenterer() {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin contentVericalCenterer() {
    display: flex;
    align-items: center;
}

@mixin contentHorizantalCenterer() {
    display: flex;
    justify-content: center;
}

@mixin flexBetween() {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

@mixin columnFlex() {
    display: flex;
    flex-direction: column;
}

@mixin flexAlignCenter() {
    display: flex;
    align-items: center;
}

//circle shape
@mixin circle($dimension) {
    width: $dimension;
    height: $dimension;
    border-radius: 50%;
}

// main box shadow
@mixin mainBoxShadow() {
    @include prefixer(box-shadow, 0 0 10px #ddd, $prefixes);
}

//triangle mixin
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    z-index: 2;
    border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction==top or $direction==bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    }

    @else if $direction==right or $direction==left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}